/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var W=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var J=Object.getOwnPropertyNames;var _=Object.prototype.hasOwnProperty;var Z=(y,i)=>{for(var e in i)W(y,e,{get:i[e],enumerable:!0})},ee=(y,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of J(i))!_.call(y,s)&&s!==e&&W(y,s,{get:()=>i[s],enumerable:!(t=Q(i,s))||t.enumerable});return y};var te=y=>ee(W({},"__esModule",{value:!0}),y);var se={};Z(se,{default:()=>q});module.exports=te(se);var f=require("obsidian");var k={transitionSeconds:30,minSessionSeconds:300,showStatusBar:!0,showWorkspaceBorder:!0,borderOpacity:.3,enableApi:!1,apiPort:3030,enableAuthentication:!0,enableSync:!1,syncInterval:5,deviceId:"",deviceName:"Obsidian Device",showPeriodicReminder:!1,reminderIntervalMinutes:1},I="role-switch-view";var p=class{static generateId(){return Math.random().toString(36).substring(2,9)}static formatDuration(i){if(i<60)return`${Math.round(i)}min`;let e=Math.floor(i/60),t=Math.round(i%60);return t===0?`${e}h`:`${e}h ${t}min`}static formatTime(i){return i.toLocaleTimeString("en",{hour:"2-digit",minute:"2-digit",hour12:!1})}static getStartOfDay(i=new Date){let e=new Date(i);return e.setHours(0,0,0,0),e}static getStartOfWeek(i=new Date){let e=new Date(i);return e.setDate(i.getDate()-i.getDay()),e.setHours(0,0,0,0),e}static getStartOfMonth(i=new Date){return new Date(i.getFullYear(),i.getMonth(),1)}static calculateSessionDuration(i,e){return i.endAt?(new Date(i.endAt).getTime()-new Date(i.startAt).getTime())/(1e3*60):i.id===e?(Date.now()-new Date(i.startAt).getTime())/(1e3*60):0}static deriveSessionsFromEvents(i,e,t){var o,r;let s=[],a=i.slice().sort((u,c)=>new Date(u.at).getTime()-new Date(c.at).getTime()),n=null;for(let u of a){let c=new Date(u.at);if(!(e&&c<e)&&!(t&&c>t))switch(u.type){case"start":n={id:((o=u.meta)==null?void 0:o.sessionId)||p.generateId(),roleId:u.roleId,startAt:u.at,notes:[]};break;case"end":n&&n.roleId===u.roleId&&(s.push({...n,endAt:u.at}),n=null);break;case"switch":n&&s.push({...n,endAt:u.at}),n={id:((r=u.meta)==null?void 0:r.sessionId)||p.generateId(),roleId:u.roleId,startAt:u.at,notes:[]};break}}return n&&n.startAt&&s.push(n),s}static getSessionsWithDurations(i,e,t,s){return p.deriveSessionsFromEvents(i,e,t).map(n=>({...n,durationMinutes:p.calculateSessionDuration(n,s)}))}static calculateAnalytics(i){let e=i.reduce((n,o)=>n+o.durationMinutes,0),t=i.length,s=t>0?e/t:0,a={};return i.forEach(n=>{a[n.roleId]||(a[n.roleId]={totalMinutes:0,sessionCount:0}),a[n.roleId].totalMinutes+=n.durationMinutes,a[n.roleId].sessionCount+=1}),{totalMinutes:e,switchCount:t,avgSessionDuration:s,roleStats:a}}static exportToCSV(i,e=[]){let s=[["Date","Start Time","End Time","Duration (min)","Role ID","Session ID","Notes"]];return i.forEach(a=>{let n=new Date(a.startAt),o=a.endAt?new Date(a.endAt):null,r=o?Math.round((o.getTime()-n.getTime())/(1e3*60)):"Ongoing",c=e.filter(l=>a.notes.some(h=>h.id===l.id)).map(l=>l.text).join("; ");s.push([n.toLocaleDateString(),p.formatTime(n),o?p.formatTime(o):"Ongoing",r.toString(),a.roleId,a.id,c])}),s.map(a=>a.map(n=>`"${n.toString().replace(/"/g,'""')}"`).join(",")).join(`
`)}static exportToJSON(i,e=[]){let t={exportDate:new Date().toISOString(),sessions:i.map(s=>({...s,notes:e.filter(a=>s.notes.some(n=>n.id===a.id))}))};return JSON.stringify(t,null,2)}static debounce(i,e){let t;return(...s)=>{clearTimeout(t),t=setTimeout(()=>i(...s),e)}}static isValidHexColor(i){return/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(i)}static generateRandomColor(){let i=["#e74c3c","#3498db","#2ecc71","#f39c12","#9b59b6","#1abc9c","#34495e","#e67e22","#8e44ad","#27ae60","#2980b9","#f1c40f","#d35400","#c0392b","#16a085"];return i[Math.floor(Math.random()*i.length)]}};var b=require("obsidian");var X=require("obsidian"),g=class{static getIcon(i){return this.ICONS[i]||this.ICONS.A}static renderIcon(i,e=24,t="currentColor"){return this.getIcon(i).replace('fill="currentColor"',`fill="${t}"`).replace('viewBox="0 0 24 24"',`viewBox="0 0 24 24" width="${e}" height="${e}"`)}static createIconElement(i,e=24,t="currentColor"){let s=document.createElement("div");if(s.style.display="inline-flex",s.style.alignItems="center",s.style.justifyContent="center",s.style.width=e+"px",s.style.height=e+"px",X.Platform.isMobile){let a=this.getIcon(i);if(a){s.innerHTML=a;let n=s.querySelector("svg");n?(n.setAttribute("width",e.toString()),n.setAttribute("height",e.toString()),n.setAttribute("fill",t),n.style.display="block"):(s.innerHTML="",s.textContent=i.charAt(0).toUpperCase(),s.style.color=t,s.style.fontSize=e*.6+"px",s.style.fontWeight="bold")}else s.textContent=i.charAt(0).toUpperCase(),s.style.color=t,s.style.fontSize=e*.6+"px",s.style.fontWeight="bold"}else{let a=this.getIcon(i);if(a)try{let r=new DOMParser().parseFromString(a,"image/svg+xml").querySelector("svg");if(r){r.setAttribute("width",e.toString()),r.setAttribute("height",e.toString()),r.setAttribute("fill",t),r.style.display="block";let u=document.importNode(r,!0);s.appendChild(u)}else console.error("No SVG element found in parsed SVG for",i),s.textContent=i.charAt(0).toUpperCase()}catch(n){console.error("Error creating icon element for",i,n),s.textContent=i.charAt(0).toUpperCase()}else s.textContent=i.charAt(0).toUpperCase()}return s}static getAllIcons(){return Object.keys(this.ICONS)}static getIconsByCategory(){return{"A-G":["A","B","C","D","E","F","G"],"H-N":["H","I","J","K","L","M","N"],"O-U":["O","P","Q","R","S","T","U"],"V-Z":["V","W","X","Y","Z"]}}};g.ICONS={A:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">A</text></svg>',B:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">B</text></svg>',C:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">C</text></svg>',D:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">D</text></svg>',E:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">E</text></svg>',F:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">F</text></svg>',G:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">G</text></svg>',H:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">H</text></svg>',I:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">I</text></svg>',J:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">J</text></svg>',K:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">K</text></svg>',L:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">L</text></svg>',M:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">M</text></svg>',N:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">N</text></svg>',O:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">O</text></svg>',P:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">P</text></svg>',Q:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">Q</text></svg>',R:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">R</text></svg>',S:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">S</text></svg>',T:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">T</text></svg>',U:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">U</text></svg>',V:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">V</text></svg>',W:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">W</text></svg>',X:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">X</text></svg>',Y:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">Y</text></svg>',Z:'<svg viewBox="0 0 24 24" fill="currentColor"><text x="12" y="18" text-anchor="middle" font-size="18" font-weight="bold" font-family="Arial, sans-serif">Z</text></svg>'};var m=require("obsidian");var N=class extends m.Modal{constructor(e,t,s){super(e);this.countdownInterval=null;this.plugin=t,this.targetRole=s,this.remainingSeconds=t.data.settings.transitionSeconds}onOpen(){let{contentEl:e}=this;e.empty(),e.addClass("transition-modal"),m.Platform.isMobile&&e.addClass("mobile"),e.createEl("div",{text:`Switching to: ${this.targetRole.name}`,cls:"transition-title"}).style.color=this.targetRole.colorHex;let t=e.createEl("div",{text:`${this.remainingSeconds}s`,cls:"transition-countdown"}),s=N.TRANSITION_MESSAGES[Math.floor(Math.random()*N.TRANSITION_MESSAGES.length)];e.createEl("div",{text:s,cls:"transition-message"});let n=e.createDiv({cls:"transition-buttons"}).createEl("button",{text:"Cancel"});m.Platform.isMobile&&n.addClass("mobile"),this.countdownInterval=window.setInterval(()=>{this.remainingSeconds--,t.setText(`${this.remainingSeconds}s`),this.remainingSeconds<=0&&(this.plugin.confirmSwitch(this.targetRole.id),this.countdownInterval&&clearInterval(this.countdownInterval),this.close())},1e3),n.addEventListener("click",()=>{this.plugin.data.events.push({id:p.generateId(),type:"cancelTransition",roleId:this.targetRole.id,at:new Date().toISOString(),meta:{fromRoleId:this.plugin.data.state.activeRoleId||void 0,transitionSeconds:this.plugin.data.settings.transitionSeconds}}),this.close()})}onClose(){this.countdownInterval&&clearInterval(this.countdownInterval);let{contentEl:e}=this;e.empty()}},A=N;A.TRANSITION_MESSAGES=["Studies show that it takes an average of 20-25 minutes to re-enter a state of deep flow when switching to a completely different task.","If you intentionally create a 'switch buffer,' your brain will recognize that 'you're in a different mode,' making it easier to shift your mindset.","Taking a moment to pause between roles helps you mentally close the previous task and prepare for the next one with full attention.","This transition time allows your mind to let go of the previous context and embrace the new role without carrying over distractions.","Brief pauses between different types of work reduce cognitive load and help maintain higher quality focus in each role."];var C=class extends m.Modal{constructor(e,t,s="start"){super(e);this.plugin=t,this.mode=s}onOpen(){let{contentEl:e}=this;e.empty(),m.Platform.isMobile&&e.addClass("role-picker-modal");let t=this.mode==="start"?"Start Role":"Switch Role";if(e.createEl("h2",{text:t}),this.plugin.data.roles.length===0){e.createDiv({text:"No roles created yet. Create roles in settings first.",attr:{style:"text-align: center; color: var(--text-muted); font-style: italic; padding: 20px;"}});return}let s=e.createDiv({cls:`role-picker-grid ${m.Platform.isMobile?"mobile":""}`});this.plugin.data.roles.forEach(a=>{this.createRoleCard(s,a)})}createRoleCard(e,t){let s=this.plugin.data.state.activeRoleId===t.id,a=e.createDiv({cls:`role-card-picker ${s?"active":""}`});s&&(a.style.borderColor=t.colorHex),a.addEventListener("mouseenter",()=>{s||(a.style.borderColor=t.colorHex)}),a.addEventListener("mouseleave",()=>{s||(a.style.borderColor="")});let n=a.createDiv({cls:"role-icon-picker"});if(n.style.backgroundColor=t.colorHex,t.icon&&g.ICONS[t.icon]){let r=g.createIconElement(t.icon,20,"white");n.appendChild(r)}let o=a.createEl("h3",{text:t.name,cls:`role-name-picker ${s?"active":""}`});if(s&&(o.style.color=t.colorHex),t.description&&a.createDiv({text:t.description,cls:"role-description-picker"}),s){let r=a.createDiv({text:"\u25CF Active",cls:"role-status-active"});r.style.color=t.colorHex}a.addEventListener("click",r=>{if(r.stopPropagation(),s&&this.mode==="switch"){new m.Notice("Already in this role");return}this.mode==="start"?this.plugin.startSession(t.id):this.plugin.switchSession(t.id),setTimeout(()=>this.close(),0)})}onClose(){let{contentEl:e}=this;e.empty()}},M=class extends m.Modal{constructor(e,t,s,a=null){super(e);this.plugin=t,this.sessionId=s,this.note=a}onOpen(){let{contentEl:e}=this;e.empty();let t=this.note?"Edit Note":"Add Note";e.createEl("h2",{text:t}),this.textArea=e.createEl("textarea",{cls:"note-edit-textarea"}),this.note&&(this.textArea.value=this.note.text);let s=e.createDiv({cls:"note-edit-buttons"});s.createEl("button",{text:"Save",cls:"note-edit-save"}).addEventListener("click",()=>this.save()),this.note&&s.createEl("button",{text:"Delete",cls:"note-edit-delete"}).addEventListener("click",()=>this.delete()),this.textArea.focus()}save(){let e=this.textArea.value.trim();if(!e){new m.Notice("Note text cannot be empty");return}try{this.note?(this.plugin.updateNote(this.note.id,e),new m.Notice("Note updated")):(this.plugin.addNote(this.sessionId,e),new m.Notice("Note added")),this.close()}catch(t){new m.Notice("Failed to save note"),console.error("Error saving note:",t)}}delete(){if(this.note)try{this.plugin.deleteNote(this.note.id),new m.Notice("Note deleted"),this.close()}catch(e){new m.Notice("Failed to delete note"),console.error("Error deleting note:",e)}}onClose(){let{contentEl:e}=this;e.empty()}},E=class extends m.Modal{constructor(e,t){super(e);this.timerInterval=null;this.durationEl=null;this.lockEl=null;this.plugin=t}onOpen(){let{contentEl:e}=this;e.empty(),e.addClass("dashboard-modal"),m.Platform.isMobile&&e.addClass("mobile");let t=e.createDiv({cls:"dashboard-header"});if(!m.Platform.isMobile)try{let s=this.app.vault.adapter;if(s&&s.basePath){let a=s.basePath+"/.obsidian/plugins/obsidian-role-switch",n=t.createEl("img",{attr:{src:`app://local/${a}/image/logo.png`,alt:"RoleSwitch Logo"},cls:"dashboard-logo"});n.style.width="32px",n.style.height="32px",n.style.marginRight="12px",n.addEventListener("error",()=>{n.remove()})}}catch(s){console.error("RoleDashboardModal: Error loading logo (non-critical):",s)}t.createEl("h2",{text:"Role Dashboard",attr:{style:"margin: 0;"}}),this.createAnalyticsSection(e),this.createCurrentStatusSection(e),this.startRealtimeTimer()}createAnalyticsSection(e){let t=e.createDiv({cls:"analytics-section-dashboard"});t.createEl("h3",{text:"\u{1F4CA} Analytics",attr:{style:"margin: 0 0 12px 0; font-size: 16px;"}});let s=p.getStartOfDay(),a=this.plugin.getDerivedSessions(s,new Date),n=a.reduce((R,S)=>S.endAt?R+(new Date(S.endAt).getTime()-new Date(S.startAt).getTime())/(1e3*60):S.id===this.plugin.data.state.activeSessionId?R+(Date.now()-new Date(S.startAt).getTime())/(1e3*60):R,0),o=a.length,r=p.getStartOfWeek(),c=this.plugin.getDerivedSessions(r,new Date).reduce((R,S)=>S.endAt?R+(new Date(S.endAt).getTime()-new Date(S.startAt).getTime())/(1e3*60):S.id===this.plugin.data.state.activeSessionId?R+(Date.now()-new Date(S.startAt).getTime())/(1e3*60):R,0),l=c/7,h=p.getStartOfMonth(),w=this.plugin.getDerivedSessions(h,new Date).reduce((R,S)=>S.endAt?R+(new Date(S.endAt).getTime()-new Date(S.startAt).getTime())/(1e3*60):S.id===this.plugin.data.state.activeSessionId?R+(Date.now()-new Date(S.startAt).getTime())/(1e3*60):R,0),D=new Date(s.getFullYear(),s.getMonth()+1,0).getDate(),Y=w/D,F=t.createDiv({cls:`analytics-grid-dashboard ${m.Platform.isMobile?"mobile":""}`}),V=F.createDiv({cls:"analytics-card-dashboard"});V.createEl("h4",{text:"Today",attr:{style:"margin: 0 0 8px 0; font-size: 14px; color: var(--text-accent);"}}),V.createEl("div",{text:`${Math.round(n)}min total`,attr:{style:"font-size: 13px; margin-bottom: 4px;"}}),V.createEl("div",{text:`${o} switches`,attr:{style:"font-size: 13px; color: var(--text-muted);"}});let U=F.createDiv({cls:"analytics-card-dashboard"});U.createEl("h4",{text:"Averages",attr:{style:"margin: 0 0 8px 0; font-size: 14px; color: var(--text-accent);"}}),U.createEl("div",{text:`${Math.round(l)}min/day (week)`,attr:{style:"font-size: 13px; margin-bottom: 4px;"}}),U.createEl("div",{text:`${Math.round(Y)}min/day (month)`,attr:{style:"font-size: 13px; color: var(--text-muted);"}});let z=F.createDiv({cls:`analytics-card-dashboard analytics-card-totals ${m.Platform.isMobile?"mobile":""}`});z.createEl("h4",{text:"Totals",attr:{style:"margin: 0 0 8px 0; font-size: 14px; color: var(--text-accent);"}});let j=z.createDiv({cls:"analytics-totals-grid"});j.createEl("div",{text:`Week: ${Math.round(c)}min`,attr:{style:"font-size: 13px;"}}),j.createEl("div",{text:`Month: ${Math.round(w)}min`,attr:{style:"font-size: 13px;"}})}createCurrentStatusSection(e){let t=e.createDiv({cls:"current-status-dashboard"});if(t.createEl("h3",{text:"Current Session",attr:{style:"margin-top: 0; color: var(--interactive-accent);"}}),this.plugin.data.state.activeRoleId){let s=this.plugin.data.roles.find(a=>a.id===this.plugin.data.state.activeRoleId);if(s){let a=t.createDiv({cls:"active-info"}),n=a.createDiv({cls:"active-role-dot"});if(n.style.backgroundColor=s.colorHex,s.icon&&g.ICONS[s.icon]){let r=g.createIconElement(s.icon,12,"white");r.style.filter="drop-shadow(0 1px 1px rgba(0,0,0,0.3))",n.appendChild(r)}let o=a.createDiv();if(o.createEl("strong",{text:`Active: ${s.name}`,cls:"active-role-name"}),this.plugin.data.state.activeStartAt&&(this.durationEl=o.createEl("div",{text:"Duration: 0s",cls:"active-duration"}),this.updateDurationDisplay()),this.plugin.isSessionLocked()){let r=this.plugin.getRemainingLockTime();this.lockEl=t.createDiv({text:`\u{1F512} Session locked for ${r} more seconds`,cls:"session-locked-warning"})}}}else t.createDiv({text:"\u23F8\uFE0F No active session",cls:"no-session-notice"});this.createTodayHistorySection(t)}createTodayHistorySection(e){let t=p.getStartOfDay(),s=this.plugin.getDerivedSessions(t,new Date);if(s.length>0){e.createEl("h4",{text:"Today's History",attr:{style:"margin: 20px 0 10px 0; color: var(--text-accent);"}});let a=e.createDiv({cls:"history-container"});s.forEach(n=>{let o=this.plugin.data.roles.find(r=>r.id===n.roleId);if(o){let r=a.createDiv({cls:"history-session-item"}),u=r.createDiv({cls:"history-role-indicator"});u.style.backgroundColor=o.colorHex;let c=r.createDiv(),l=new Date(n.startAt).toLocaleTimeString("en",{hour:"2-digit",minute:"2-digit"}),h=0;n.endAt?h=Math.round((new Date(n.endAt).getTime()-new Date(n.startAt).getTime())/(1e3*60)):n.id===this.plugin.data.state.activeSessionId&&(h=Math.round((Date.now()-new Date(n.startAt).getTime())/(1e3*60))),c.createEl("div",{text:`${o.name} \u2022 ${l} \u2022 ${h}min`,cls:"history-session-details"})}})}}startRealtimeTimer(){this.timerInterval&&clearInterval(this.timerInterval),this.plugin.data.state.activeRoleId&&this.plugin.data.state.activeStartAt&&(this.timerInterval=window.setInterval(()=>{this.updateDurationDisplay(),this.updateLockDisplay()},1e3))}updateDurationDisplay(){if(!this.durationEl||!this.plugin.data.state.activeStartAt)return;let e=new Date(this.plugin.data.state.activeStartAt),t=Date.now(),s=Math.floor((t-e.getTime())/1e3),a=Math.floor(s/3600),n=Math.floor(s%3600/60),o=s%60,r="";a>0?r=`${a}h ${n}m ${o}s`:n>0?r=`${n}m ${o}s`:r=`${o}s`,this.durationEl.setText(`Duration: ${r}`)}updateLockDisplay(){if(this.lockEl)if(this.plugin.isSessionLocked()){let e=this.plugin.getRemainingLockTime();this.lockEl.setText(`\u{1F512} Session locked for ${e} more seconds`)}else this.lockEl.remove(),this.lockEl=null}onClose(){this.timerInterval&&clearInterval(this.timerInterval);let{contentEl:e}=this;e.empty()}},B=class extends m.Modal{constructor(e,t,s){super(e);this.selectedIcon=null;this.updateButtonState=null;this.onSelectIcon=t,this.selectedIcon=s||null}onOpen(){let{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"Select Icon"});let t=e.createDiv({cls:"icon-picker-container"}),s=t.createDiv({cls:"icon-grid"}),a=g.getAllIcons();a.length===0?t.createDiv({text:"No icons available",cls:"no-icons-available"}):a.forEach(u=>{this.createIconButton(s,u)}),this.updateSelectedDisplay(e);let n=e.createDiv({cls:"icon-picker-buttons"}),o=n.createEl("button",{text:"Select"});o.disabled=!this.selectedIcon,o.addEventListener("click",()=>{this.selectedIcon&&(this.onSelectIcon(this.selectedIcon),this.close())}),n.createEl("button",{text:"Cancel"}).addEventListener("click",()=>this.close()),this.updateButtonState=u=>{o.disabled=!u}}createIconButton(e,t){let s=this.selectedIcon===t,a=e.createDiv({cls:`icon-button ${s?"selected":""}`,attr:{"data-icon-key":t,title:t}}),n=a.createDiv({cls:`icon-element ${s?"selected":""}`});try{let o=g.createIconElement(t,20,s?"#007acc":"#666");n.appendChild(o)}catch(o){console.error("IconPickerModal: Error creating icon for",t,o),n.textContent=t.charAt(0).toUpperCase()}a.addEventListener("click",()=>{this.selectedIcon=t,this.updateIconGrid(a.parentElement),this.updateSelectedDisplay(this.contentEl),this.updateButtonState&&this.updateButtonState(!0)})}updateIconGrid(e){let t=e.parentElement;if(!t)return;t.querySelectorAll('div[style*="display: grid"]').forEach(a=>{let n=a.children;for(let o=0;o<n.length;o++){let r=n[o],u=r.getAttribute("data-icon-key"),c=u===this.selectedIcon;c?r.addClass("selected"):r.removeClass("selected");let l=r.querySelector(".icon-element");if(l&&u){l.empty();try{let h=g.createIconElement(u,20,c?"#007acc":"#666");l.appendChild(h)}catch(h){console.error("IconPickerModal: Error updating icon for",u,h),l.textContent=u.charAt(0).toUpperCase()}}}})}updateSelectedDisplay(e){}onClose(){let{contentEl:e}=this;e.empty()}};var T=class extends b.ItemView{constructor(e,t){super(e);this.timerInterval=null;this.durationElement=null;this.lockElement=null;this.roleLockElements=new Map;this.endSessionButton=null;this.plugin=t}getViewType(){return I}getDisplayText(){return"RoleSwitch"}getIcon(){return"clock"}async onOpen(){let e=this.containerEl.children[1];if(!e){console.error("RoleSwitchView: No container element found!");return}e.empty(),e.addClass("role-switch-view"),this.addSidePanelStyles();try{this.createSidePanelDashboard(e)}catch(t){console.error("RoleSwitchView: Error creating dashboard:",t),this.createFallbackDashboard(e)}}async onClose(){this.stopRealtimeTimer()}addSidePanelStyles(){if(document.getElementById("role-switch-side-panel-styles"))return;let e=document.createElement("style");e.id="role-switch-side-panel-styles",e.textContent=`
			.role-switch-view {
				padding: 16px;
				height: 100%;
				overflow-y: auto;
			}
			
			.role-switch-view .side-panel-header {
				display: flex;
				align-items: center;
				gap: 8px;
				margin-bottom: 16px;
			}
			
			.role-switch-view .header-icon {
				width: 20px;
				height: 20px;
				display: flex;
				align-items: center;
				justify-content: center;
				color: var(--interactive-accent);
			}
		`,document.head.appendChild(e)}createSidePanelDashboard(e){let t=e.createDiv({cls:"side-panel-header"}),s=t.createDiv({cls:"header-icon"});if(b.Platform.isMobile){let n=g.createIconElement("A",20,"var(--interactive-accent)");n.firstChild&&s.appendChild(n.firstChild)}else try{let n=this.app.vault.adapter;if(n&&n.basePath){let o=n.basePath+"/.obsidian/plugins/obsidian-role-switch",r=s.createEl("img",{attr:{src:`app://local/${o}/image/logo.png`,alt:"RoleSwitch Logo"},cls:"header-logo"});r.style.width="24px",r.style.height="24px",r.addEventListener("error",()=>{s.empty();let u=g.createIconElement("A",20,"var(--interactive-accent)");u.firstChild&&s.appendChild(u.firstChild)})}}catch(n){console.error("RoleSwitchView: Error loading logo (non-critical):",n);let o=g.createIconElement("A",20,"var(--interactive-accent)");o.firstChild&&s.appendChild(o.firstChild)}let a=t.createEl("h2",{text:"RoleSwitch",cls:"header-title"});try{this.createCompactRolesSection(e)}catch(n){console.error("RoleSwitchView: Error creating roles section:",n)}try{this.createQuickActionsSection(e)}catch(n){console.error("RoleSwitchView: Error creating quick actions section:",n)}try{this.createCompactStatusSection(e)}catch(n){console.error("RoleSwitchView: Error creating status section:",n)}}createCompactStatusSection(e){let t=e.createDiv({cls:"side-panel-section"});t.createEl("h3",{text:"Current History"});let s=t.createDiv({cls:"current-status-compact"});if(this.plugin.data.state.activeRoleId){let a=this.plugin.data.roles.find(n=>n.id===this.plugin.data.state.activeRoleId);if(a){let n=s.createDiv({cls:"status-info"}),o=n.createDiv({cls:"role-indicator"});if(o.style.backgroundColor=a.colorHex,a.icon&&g.ICONS[a.icon]){let c=g.createIconElement(a.icon,12,"white");c.style.filter="drop-shadow(0 1px 1px rgba(0,0,0,0.3))",o.appendChild(c)}let r=n.createDiv({cls:"role-info"}),u=r.createEl("div",{text:a.name,cls:"role-name"});if(u.style.color=a.colorHex,this.plugin.data.state.activeStartAt){let c=new Date(this.plugin.data.state.activeStartAt),l=Math.floor((Date.now()-c.getTime())/1e3),h=Math.floor(l/3600),v=Math.floor(l%3600/60),w=l%60,D;h>0?D=`${h}h ${v}m ${w}s`:v>0?D=`${v}m ${w}s`:D=`${w}s`,this.durationElement=r.createEl("div",{text:D,cls:"role-duration"}),this.startRealtimeTimer()}else this.durationElement=null;if(this.plugin.isSessionLocked()){let c=this.plugin.getRemainingLockTime();this.lockElement=s.createDiv({text:`\u{1F512} Locked (${c}s)`,cls:"session-locked"})}else this.lockElement=null}}else this.stopRealtimeTimer(),this.durationElement=null,s.createDiv({text:"\u23F8\uFE0F No active session",cls:"no-active-session"});this.createTodayHistorySection(s)}createTodayHistorySection(e){let t=p.getStartOfDay(),s=this.plugin.getDerivedSessions(t,new Date);s.length>0&&(e.createDiv({cls:"history-divider"}).createEl("div",{text:"Today's History",cls:"history-header"}),s.slice(-3).forEach(o=>{let r=this.plugin.data.roles.find(u=>u.id===o.roleId);if(r){let u=e.createDiv({cls:"history-session"}),c=u.createDiv({cls:"role-indicator"});c.style.backgroundColor=r.colorHex;let l=u.createDiv({cls:"session-info"}),h=new Date(o.startAt).toLocaleTimeString("en",{hour:"2-digit",minute:"2-digit"}),v=0;o.endAt?v=Math.round((new Date(o.endAt).getTime()-new Date(o.startAt).getTime())/(1e3*60)):o.id===this.plugin.data.state.activeSessionId&&(v=Math.round((Date.now()-new Date(o.startAt).getTime())/(1e3*60))),l.createEl("div",{text:`${r.name} \u2022 ${h} \u2022 ${v}min`,cls:"session-details"})}}),s.length>3&&e.createEl("div",{text:`+${s.length-3} more sessions`,cls:"more-sessions"}))}createQuickActionsSection(e){let t=e.createDiv({cls:"side-panel-section"});t.createEl("h3",{text:"Quick Actions"});let s=t.createDiv({cls:"quick-actions-container"});if(s.createEl("button",{text:"Dashboard",cls:"quick-action-btn"}).addEventListener("click",()=>{try{new E(this.app,this.plugin).open()}catch(n){console.error("RoleSwitchView: Error opening dashboard:",n),console.error("Error details:",n instanceof Error?n.message:n),console.error("Stack trace:",n instanceof Error?n.stack:"No stack trace"),new b.Notice(`Dashboard error: ${n instanceof Error?n.message:"Unknown error"}`)}}),this.plugin.data.state.activeRoleId){let n=this.plugin.isSessionLocked();if(this.endSessionButton=s.createEl("button",{text:"\u23F9\uFE0F End Session",cls:"quick-action-btn end-session"}),n){this.endSessionButton.disabled=!0,this.endSessionButton.addClass("locked");let o=this.plugin.getRemainingLockTime();this.endSessionButton.title=`Session locked for ${o} more seconds`}this.endSessionButton.addEventListener("click",()=>{this.plugin.isSessionLocked()||(this.plugin.endSession(),this.refresh())})}else this.endSessionButton=null}createCompactRolesSection(e){let t=e.createDiv({cls:"side-panel-section"});t.createEl("h3",{text:"Roles"});let s=t.createDiv({cls:"compact-roles-grid"});this.roleLockElements.clear(),this.plugin.data.roles.forEach(a=>{this.createCompactRoleCard(s,a)})}createCompactRoleCard(e,t){let s=this.plugin.data.state.activeRoleId===t.id,a=s&&this.plugin.isSessionLocked(),n=e.createDiv({cls:`compact-role-card ${s?"active":""} ${a?"locked":""}`});s&&(n.style.borderColor=t.colorHex);let o=n.createDiv({cls:"compact-role-header"}),r=o.createDiv({cls:"compact-role-icon"});if(r.style.backgroundColor=t.colorHex,t.icon&&g.ICONS[t.icon]){let c=g.createIconElement(t.icon,10,"white");c.style.filter="drop-shadow(0 1px 1px rgba(0,0,0,0.3))",r.appendChild(c)}if(o.createDiv({cls:"role-info"}).createEl("div",{text:t.name,cls:"compact-role-name"}),a){let c=this.plugin.getRemainingLockTime(),l=n.createDiv({text:`\u{1F512} ${c}s`,cls:"lock-status"});this.roleLockElements.set(t.id,l)}n.addEventListener("click",c=>{a||(n.addClass("clicked"),setTimeout(()=>n.removeClass("clicked"),200),s?new E(this.app,this.plugin).open():(this.plugin.data.state.activeRoleId?this.plugin.switchSession(t.id):this.plugin.startSession(t.id),this.refresh()))})}refresh(){this.stopRealtimeTimer(),this.onOpen()}createFallbackDashboard(e){e.createEl("h2",{text:"RoleSwitch Panel",cls:"fallback-dashboard-title"}),e.createEl("p",{text:"Dashboard is loading...",cls:"fallback-dashboard-loading"});let t=e.createDiv({cls:"fallback-info-container"});t.createEl("p",{text:`Roles count: ${this.plugin.data.roles.length}`}),t.createEl("p",{text:`Active role: ${this.plugin.data.state.activeRoleId||"None"}`}),t.createEl("p",{text:`Events count: ${this.plugin.data.events.length}`}),e.createEl("button",{text:"Test Dashboard",cls:"fallback-test-button"}).addEventListener("click",()=>{new b.Notice("Dashboard is working!")})}startRealtimeTimer(){this.stopRealtimeTimer(),!(!this.plugin.data.state.activeStartAt||!this.durationElement)&&(this.timerInterval=window.setInterval(()=>{this.updateDurationDisplay(),this.updateLockDisplay()},1e3))}stopRealtimeTimer(){this.timerInterval!==null&&(window.clearInterval(this.timerInterval),this.timerInterval=null)}updateDurationDisplay(){if(!this.plugin.data.state.activeStartAt||!this.durationElement){this.stopRealtimeTimer();return}let e=new Date(this.plugin.data.state.activeStartAt),t=Math.floor((Date.now()-e.getTime())/1e3),s=Math.floor(t/3600),a=Math.floor(t%3600/60),n=t%60,o;s>0?o=`${s}h ${a}m ${n}s`:a>0?o=`${a}m ${n}s`:o=`${n}s`,this.durationElement.textContent=o}updateLockDisplay(){let e=this.plugin.isSessionLocked();if(this.lockElement)if(e){let t=this.plugin.getRemainingLockTime();this.lockElement.textContent=`\u{1F512} Locked (${t}s)`}else this.lockElement.remove(),this.lockElement=null;if(this.plugin.data.state.activeRoleId){let t=this.plugin.data.state.activeRoleId,s=this.roleLockElements.get(t);if(s)if(e){let a=this.plugin.getRemainingLockTime();s.textContent=`\u{1F512} ${a}s`}else s.remove(),this.roleLockElements.delete(t)}if(this.endSessionButton)if(e){this.endSessionButton.disabled=!0,this.endSessionButton.addClass("locked");let t=this.plugin.getRemainingLockTime();this.endSessionButton.title=`Session locked for ${t} more seconds`}else this.endSessionButton.disabled=!1,this.endSessionButton.removeClass("locked"),this.endSessionButton.title=""}};var d=require("obsidian");var L=class extends d.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h1",{text:"RoleSwitch Settings"}),this.createRoleManagementSection(e),this.createSessionSettingsSection(e),this.createDisplaySettingsSection(e)}createRoleManagementSection(e){e.createEl("h2",{text:"Role Management"}),new d.Setting(e).setName("Add new role").setDesc("Create a new role for task switching").addButton(t=>{t.setButtonText("Add Role").setCta().onClick(()=>{this.showRoleEditModal()})}),this.createRolesList(e)}createRolesList(e){let t=e.createDiv({cls:"roles-list-container"});if(this.plugin.data.roles.length===0){t.createDiv({text:"No roles created yet. Add your first role above.",cls:"no-roles-message"});return}this.plugin.data.roles.forEach(s=>{this.createRoleSetting(t,s)})}createRoleSetting(e,t){let s=new d.Setting(e).setName(t.name).setDesc(t.description||"No description").addButton(n=>{n.setButtonText("Edit").onClick(()=>{this.showRoleEditModal(t)})}).addButton(n=>{n.setButtonText("Delete").setWarning().onClick(async()=>{await this.confirmDelete(t)&&(this.plugin.deleteRole(t.id),this.display())})}),a=document.createElement("div");if(a.addClass("role-color-indicator"),a.style.backgroundColor=t.colorHex,t.icon&&g.ICONS[t.icon]){let n=document.createElement("div");n.addClass("role-icon-container");let o=g.createIconElement(t.icon,12,"white");n.appendChild(o),a.appendChild(n)}s.nameEl.prepend(a)}createSessionSettingsSection(e){e.createEl("h2",{text:"Session Settings"});let s=new d.Setting(e).setName("Transition duration").setDesc("Time to wait before switching roles (seconds)").controlEl.createDiv({cls:"setting-item-control-flex"});[5,10,30].forEach(l=>{s.createEl("button",{text:`${l}s`,cls:"setting-preset-button"}).addEventListener("click",async()=>{this.plugin.data.settings.transitionSeconds=l,await this.plugin.savePluginData(),n.value=l.toString()})});let n=s.createEl("input",{type:"number",cls:"setting-number-input",attr:{min:"5",max:"120",step:"5"}});n.value=this.plugin.data.settings.transitionSeconds.toString(),n.addEventListener("change",async()=>{let l=parseInt(n.value);l>=5&&l<=120?(this.plugin.data.settings.transitionSeconds=l,await this.plugin.savePluginData()):n.value=this.plugin.data.settings.transitionSeconds.toString()}),s.createSpan({text:"seconds",cls:"setting-unit-label"});let r=new d.Setting(e).setName("Minimum session duration").setDesc("Minimum time before allowing role switches (minutes)").controlEl.createDiv({cls:"setting-item-control-flex"});[5,15,30].forEach(l=>{r.createEl("button",{text:`${l}m`,cls:"setting-preset-button"}).addEventListener("click",async()=>{this.plugin.data.settings.minSessionSeconds=l*60,await this.plugin.savePluginData(),c.value=l.toString()})});let c=r.createEl("input",{type:"number",cls:"setting-number-input",attr:{min:"5",max:"60",step:"5"}});c.value=(this.plugin.data.settings.minSessionSeconds/60).toString(),c.addEventListener("change",async()=>{let l=parseInt(c.value);l>=5&&l<=60?(this.plugin.data.settings.minSessionSeconds=l*60,await this.plugin.savePluginData()):c.value=(this.plugin.data.settings.minSessionSeconds/60).toString()}),r.createSpan({text:"minutes",cls:"setting-unit-label"})}createDisplaySettingsSection(e){e.createEl("h2",{text:"Display Settings"}),new d.Setting(e).setName("Show status bar").setDesc("Display current role in the status bar").addToggle(l=>{l.setValue(this.plugin.data.settings.showStatusBar).onChange(async h=>{this.plugin.data.settings.showStatusBar=h,await this.plugin.savePluginData(),this.plugin.updateStatusBar()})}),new d.Setting(e).setName("Show workspace border").setDesc("Add colored border around workspace (desktop only)").addToggle(l=>{l.setValue(this.plugin.data.settings.showWorkspaceBorder).onChange(async h=>{this.plugin.data.settings.showWorkspaceBorder=h,await this.plugin.savePluginData(),this.plugin.updateWorkspaceBorder()})});let s=new d.Setting(e).setName("Border opacity").setDesc("Opacity of the workspace border (0.1 to 1.0)").controlEl.createDiv({cls:"setting-item-control-flex"});[.3,.5,.8].forEach(l=>{s.createEl("button",{text:`${l}`,cls:"setting-preset-button"}).addEventListener("click",async()=>{this.plugin.data.settings.borderOpacity=l,await this.plugin.savePluginData(),this.plugin.updateWorkspaceBorder(),n.value=l.toString()})});let n=s.createEl("input",{type:"number",cls:"setting-number-input",attr:{min:"0.1",max:"1.0",step:"0.1"}});n.value=this.plugin.data.settings.borderOpacity.toString(),n.addEventListener("change",async()=>{let l=parseFloat(n.value);l>=.1&&l<=1?(this.plugin.data.settings.borderOpacity=l,await this.plugin.savePluginData(),this.plugin.updateWorkspaceBorder()):n.value=this.plugin.data.settings.borderOpacity.toString()}),s.createSpan({text:"opacity",cls:"setting-unit-label"}),new d.Setting(e).setName("Show periodic role reminder").setDesc("Display a periodic notification showing your current role").addToggle(l=>{l.setValue(this.plugin.data.settings.showPeriodicReminder).onChange(async h=>{this.plugin.data.settings.showPeriodicReminder=h,await this.plugin.savePluginData(),this.plugin.updateReminderInterval()})});let r=new d.Setting(e).setName("Reminder interval").setDesc("How often to show the role reminder (minutes)").controlEl.createDiv({cls:"setting-item-control-flex"});[5,15,30].forEach(l=>{r.createEl("button",{text:`${l}m`,cls:"setting-preset-button"}).addEventListener("click",async()=>{this.plugin.data.settings.reminderIntervalMinutes=l,await this.plugin.savePluginData(),this.plugin.updateReminderInterval(),c.value=l.toString()})});let c=r.createEl("input",{type:"number",cls:"setting-number-input",attr:{min:"1",max:"60",step:"1"}});c.value=this.plugin.data.settings.reminderIntervalMinutes.toString(),c.addEventListener("change",async()=>{let l=parseInt(c.value);l>=1&&l<=60?(this.plugin.data.settings.reminderIntervalMinutes=l,await this.plugin.savePluginData(),this.plugin.updateReminderInterval()):c.value=this.plugin.data.settings.reminderIntervalMinutes.toString()}),r.createSpan({text:"minutes",cls:"setting-unit-label"}),new d.Setting(e).setName("Reset settings").setDesc("Reset all settings to default values").addButton(l=>{l.setButtonText("Reset to Defaults").setWarning().onClick(async()=>{await this.confirmReset()&&(this.plugin.data.settings={...k},await this.plugin.savePluginData(),this.display(),new d.Notice("Settings reset to defaults"))})})}createApiAndSyncSettingsSection(e){e.createEl("h2",{text:"API & Synchronization Settings"}),new d.Setting(e).setName("Enable Synchronization").setDesc("Enable API server and sync functionality for external integrations and device synchronization").addToggle(t=>{t.setValue(this.plugin.data.settings.enableSync).onChange(async s=>{this.plugin.data.settings.enableSync=s,this.plugin.data.settings.enableApi=s,await this.plugin.savePluginData(),s?(await this.plugin.startApiServer(),this.plugin.sync.startAutoSync()):(await this.plugin.stopApiServer(),this.plugin.sync.stopAutoSync()),this.display()})}),this.plugin.data.settings.enableSync&&(new d.Setting(e).setName("Device Name").setDesc("Name to identify this device in sync operations").addText(t=>{t.setValue(this.plugin.data.settings.deviceName).onChange(async s=>{this.plugin.data.settings.deviceName=s||"Obsidian Device",await this.plugin.savePluginData()})}),new d.Setting(e).setName("Device ID").setDesc("Unique identifier for this device (auto-generated)").addText(t=>{t.setValue(this.plugin.data.settings.deviceId).setDisabled(!0)}),new d.Setting(e).setName("API Port").setDesc("Port number for the API server").addText(t=>{t.setValue(this.plugin.data.settings.apiPort.toString()).onChange(async s=>{let a=parseInt(s);a>=1024&&a<=65535&&(this.plugin.data.settings.apiPort=a,await this.plugin.savePluginData())})}),new d.Setting(e).setName("Enable Authentication").setDesc("Require API keys for API access (recommended)").addToggle(t=>{t.setValue(this.plugin.data.settings.enableAuthentication).onChange(async s=>{this.plugin.data.settings.enableAuthentication=s,await this.plugin.savePluginData(),this.display()})}),this.plugin.data.settings.enableAuthentication&&this.createApiKeyManagement(e),new d.Setting(e).setName("Sync Interval").setDesc("How often to sync in minutes").addSlider(t=>{t.setLimits(1,60,1).setValue(this.plugin.data.settings.syncInterval).setDynamicTooltip().onChange(async s=>{this.plugin.data.settings.syncInterval=s,await this.plugin.savePluginData(),this.plugin.sync.stopAutoSync(),this.plugin.sync.startAutoSync()})}),this.createSyncEndpointManagement(e))}createApiKeyManagement(e){e.createEl("h3",{text:"API Key Management"}),new d.Setting(e).setName("Generate API Key").setDesc("Create a new API key for external applications").addButton(s=>{s.setButtonText("Generate Key").setCta().onClick(()=>{this.showApiKeyModal()})});let t=this.plugin.data.apiKeys;if(t.length===0){let s=e.createDiv({text:"No API keys created yet.",cls:"setting-item-description"})}else t.forEach(s=>{let a=`${s.name} (${s.permissions.join(", ")})`,n=s.lastUsed?new Date(s.lastUsed).toLocaleDateString():"Never";new d.Setting(e).setName(a).setDesc(`Created: ${new Date(s.createdAt).toLocaleDateString()} | Last used: ${n}`).addButton(o=>{o.setButtonText("Delete").setWarning().onClick(async()=>{await this.confirmDeleteApiKey(s)&&(this.plugin.auth.deleteApiKey(s.id),this.display(),new d.Notice("API key deleted"))})}).addToggle(o=>{o.setValue(s.isActive).onChange(async r=>{this.plugin.auth.updateApiKey(s.id,{isActive:r}),new d.Notice(`API key ${r?"enabled":"disabled"}`)})})})}createSyncEndpointManagement(e){e.createEl("h3",{text:"Sync Endpoints"}),new d.Setting(e).setName("Add Sync Endpoint").setDesc("Connect to another RoleSwitch instance").addButton(s=>{s.setButtonText("Add Endpoint").setCta().onClick(()=>{this.showSyncEndpointModal()})});let t=this.plugin.data.syncEndpoints;t.length===0?e.createDiv({text:"No sync endpoints configured.",cls:"setting-item-description"}):t.forEach(s=>{let a=s.lastSync?new Date(s.lastSync).toLocaleString():"Never";new d.Setting(e).setName(s.name).setDesc(`URL: ${s.url} | Direction: ${s.syncDirection} | Last sync: ${a}`).addButton(n=>{n.setButtonText("Test").onClick(async()=>{let o=await this.plugin.sync.testEndpointConnection(s);new d.Notice(o.message)})}).addButton(n=>{n.setButtonText("Sync Now").onClick(async()=>{let o=await this.plugin.sync.manualSyncEndpoint(s.id);new d.Notice(o.message),o.success&&this.display()})}).addButton(n=>{n.setButtonText("Delete").setWarning().onClick(async()=>{await this.confirmDeleteEndpoint(s)&&(this.plugin.sync.deleteSyncEndpoint(s.id),this.display(),new d.Notice("Sync endpoint deleted"))})}).addToggle(n=>{n.setValue(s.isActive).onChange(async o=>{this.plugin.sync.updateSyncEndpoint(s.id,{isActive:o}),new d.Notice(`Endpoint ${o?"enabled":"disabled"}`)})})})}showRoleEditModal(e){let t=new G(this.app,this.plugin,e),s=t.onClose.bind(t);t.onClose=()=>{s(),this.display()},t.open()}async confirmDelete(e){return new Promise(t=>{let s=new x(this.app,"Delete Role",`Are you sure you want to delete the role "${e.name}"? This action cannot be undone.`,"Delete",!0);s.onConfirm=a=>t(a),s.open()})}async confirmReset(){return new Promise(e=>{let t=new x(this.app,"Reset Settings","Are you sure you want to reset all settings to defaults? This action cannot be undone.","Reset",!0);t.onConfirm=s=>e(s),t.open()})}showApiKeyModal(){let e=new d.Modal(this.app);e.titleEl.setText("Create API Key");let{contentEl:t}=e,s,a=["read"],n=new d.Setting(t).setName("Key Name").setDesc("Descriptive name for this API key").addText(c=>(s=c.inputEl,c.setPlaceholder("My App Key"),c));new d.Setting(t).setName("Permissions").setDesc("Select what this key can do").addDropdown(c=>{c.addOption("read","Read Only - View data only").addOption("write","Read/Write - Modify sessions and roles").addOption("admin","Admin - Full access including key management").setValue("read").onChange(l=>{a=[l]})});let o=t.createDiv({cls:"modal-button-container"});o.createEl("button",{text:"Create Key",cls:"mod-cta"}).addEventListener("click",()=>{let c=s.value.trim();if(!c){new d.Notice("Key name is required");return}try{let l=this.plugin.auth.generateApiKey(c,a);new d.Notice(`API key created: ${l.key}
Secret: ${l.secret}`,1e4),e.close(),this.display()}catch(l){new d.Notice("Failed to create API key")}}),o.createEl("button",{text:"Cancel"}).addEventListener("click",()=>e.close()),e.open(),s.focus()}showSyncEndpointModal(){let e=new d.Modal(this.app);e.titleEl.setText("Add Sync Endpoint");let{contentEl:t}=e,s,a,n,o="bidirectional",r=new d.Setting(t).setName("Endpoint Name").setDesc("Name for this sync endpoint").addText(h=>(s=h.inputEl,h.setPlaceholder("Home Computer"),h));new d.Setting(t).setName("Endpoint URL").setDesc("Full URL to the other RoleSwitch API").addText(h=>{a=h.inputEl,h.setPlaceholder("http://localhost:3030")}),new d.Setting(t).setName("API Key").setDesc("Select API key to use for authentication").addDropdown(h=>{let v=this.plugin.data.apiKeys.filter(w=>w.isActive);v.length===0?h.addOption("","No active API keys available"):v.forEach(w=>{h.addOption(w.id,w.name)}),n=h.selectEl}),new d.Setting(t).setName("Sync Direction").setDesc("How data should be synchronized").addDropdown(h=>{h.addOption("push","Push Only - Send data to endpoint").addOption("pull","Pull Only - Receive data from endpoint").addOption("bidirectional","Bidirectional - Both send and receive").setValue("bidirectional").onChange(v=>{o=v})});let u=t.createDiv({cls:"modal-button-container"});u.createEl("button",{text:"Add Endpoint",cls:"mod-cta"}).addEventListener("click",()=>{let h=s.value.trim(),v=a.value.trim(),w=n.value;if(!h||!v||!w){new d.Notice("All fields are required");return}try{this.plugin.sync.addSyncEndpoint(h,v,w,o),new d.Notice("Sync endpoint added"),e.close(),this.display()}catch(D){new d.Notice("Failed to add sync endpoint")}}),u.createEl("button",{text:"Cancel"}).addEventListener("click",()=>e.close()),e.open(),s.focus()}async confirmDeleteApiKey(e){return new Promise(t=>{let s=new x(this.app,"Delete API Key",`Are you sure you want to delete the API key "${e.name}"? This action cannot be undone and any applications using this key will lose access.`,"Delete",!0);s.onConfirm=a=>t(a),s.open()})}async confirmDeleteEndpoint(e){return new Promise(t=>{let s=new x(this.app,"Delete Sync Endpoint",`Are you sure you want to delete the sync endpoint "${e.name}"?`,"Delete",!0);s.onConfirm=a=>t(a),s.open()})}createDonateSection(e){e.createEl("h2",{text:"\u{1F49D} Support Development"});let t=e.createDiv({cls:"donate-section"});t.createEl("p",{text:"If you find RoleSwitch helpful, consider supporting its development!",attr:{style:"margin-bottom: 12px;"}}),new d.Setting(t).setName("Buy Me a Coffee").setDesc("Support development with a one-time donation").addButton(s=>{s.setButtonText("\u2615 Donate").setCta().onClick(()=>{window.open("https://www.buymeacoffee.com/yourusername","_blank")})}),new d.Setting(t).setName("GitHub Sponsors").setDesc("Become a sponsor and support ongoing development").addButton(s=>{s.setButtonText("\u{1F496} Sponsor").onClick(()=>{window.open("https://github.com/sponsors/yourusername","_blank")})}),t.createEl("p",{text:"Thank you for your support! \u2764\uFE0F",attr:{style:"margin-top: 12px; color: var(--text-muted); font-style: italic;"}})}},G=class extends d.Modal{constructor(e,t,s){super(e);this.selectedIcon=null;this.plugin=t,this.role=s||null,this.selectedIcon=(s==null?void 0:s.icon)||null}onOpen(){let{contentEl:e}=this;e.empty();let t=this.role?"Edit Role":"Create New Role";e.createEl("h2",{text:t}),new d.Setting(e).setName("Role name").setDesc("A descriptive name for this role").addText(o=>{var r;this.nameInput=o.inputEl,o.setValue(((r=this.role)==null?void 0:r.name)||"").setPlaceholder("e.g., Deep Work, Meetings, Learning")}),new d.Setting(e).setName("Description").setDesc("Optional description of this role").addTextArea(o=>{var r;this.descriptionInput=o.inputEl,o.setValue(((r=this.role)==null?void 0:r.description)||"").setPlaceholder("Optional description..."),o.inputEl.rows=3}),new d.Setting(e).setName("Color").setDesc("Color to represent this role").addColorPicker(o=>{var c;let r=o;this.colorInput=r.inputEl||r.input;let u=((c=this.role)==null?void 0:c.colorHex)||p.generateRandomColor();o.setValue(u),this.colorComponent=r}),this.createIconSelection(e);let s=e.createDiv({cls:"role-edit-buttons"}),a=s.createEl("button",{text:"Save"});a.addClass("role-edit-save"),a.addEventListener("click",o=>{o.preventDefault(),o.stopPropagation();try{this.save()}catch(r){console.error("RoleEditModal: Error in save method:",r),new d.Notice("Error in save method: "+r.message)}});let n=s.createEl("button",{text:"Cancel"});n.addClass("role-edit-cancel"),n.addEventListener("click",o=>{o.preventDefault(),o.stopPropagation(),this.close()}),this.nameInput.focus()}createIconSelection(e){new d.Setting(e).setName("Icon").setDesc("Optional icon for this role").addButton(t=>{t.setButtonText("Choose Icon").onClick(()=>{new B(this.app,s=>{this.selectedIcon=s,this.updateIconDisplay(t.buttonEl)},this.selectedIcon||void 0).open()}),this.updateIconDisplay(t.buttonEl)})}updateIconDisplay(e){if(e.textContent="",this.selectedIcon){let t=g.createIconElement(this.selectedIcon,16);e.appendChild(t)}else e.textContent="Choose Icon"}save(){var n,o,r,u;let e=((o=(n=this.nameInput)==null?void 0:n.value)==null?void 0:o.trim())||"",t=((u=(r=this.descriptionInput)==null?void 0:r.value)==null?void 0:u.trim())||"",s="";if(this.colorInput&&this.colorInput.value?s=this.colorInput.value:this.colorComponent&&this.colorComponent.getValue?s=this.colorComponent.getValue():s=p.generateRandomColor(),!e){new d.Notice("Role name is required");return}p.isValidHexColor(s)||(s&&typeof s=="string"?(s.startsWith("#")||(s="#"+s),p.isValidHexColor(s)||(s=p.generateRandomColor())):s=p.generateRandomColor());try{if(this.role)this.plugin.updateRole(this.role.id,{name:e,description:t||void 0,colorHex:s,icon:this.selectedIcon||void 0}),new d.Notice("Role updated");else{let c=this.plugin.createRole(e,s,t||void 0,this.selectedIcon||void 0);new d.Notice("Role created")}this.close()}catch(c){console.error("RoleEditModal: Error saving role:",c),new d.Notice("Failed to save role")}}onClose(){let{contentEl:e}=this;e.empty()}},x=class extends d.Modal{constructor(e,t,s,a="Confirm",n=!1){super(e);this.onConfirm=()=>{};this.title=t,this.message=s,this.confirmText=a,this.isDestructive=n}onOpen(){let{contentEl:e}=this;e.empty(),e.createEl("h2",{text:this.title}),e.createEl("p",{text:this.message});let t=e.createDiv({cls:"confirm-modal-buttons"});t.createEl("button",{text:this.confirmText,cls:this.isDestructive?"confirm-button destructive":"confirm-button"}).addEventListener("click",()=>{this.close(),this.onConfirm(!0)}),t.createEl("button",{text:"Cancel"}).addEventListener("click",()=>{this.close(),this.onConfirm(!1)})}onClose(){super.onClose()}};var H=class{constructor(i,e=3030){this.isServerRunning=!1;this.plugin=i,this.port=e}async startServer(){if(this.isServerRunning)throw new Error("API server is already running");try{this.isServerRunning=!0,console.log(`RoleSwitch API server started on port ${this.port}`)}catch(i){throw new Error(`Failed to start API server: ${i}`)}}async stopServer(){if(this.isServerRunning)try{this.isServerRunning=!1,console.log("RoleSwitch API server stopped")}catch(i){throw new Error(`Failed to stop API server: ${i}`)}}getStatus(){try{let i=this.plugin.data.state,e=i.activeRoleId?this.plugin.data.roles.find(s=>s.id===i.activeRoleId):void 0,t;if(i.activeSessionId&&i.activeStartAt){let s=Math.floor((Date.now()-new Date(i.activeStartAt).getTime())/1e3);t={id:i.activeSessionId,roleId:i.activeRoleId,startAt:i.activeStartAt,duration:s}}return{success:!0,data:{isActive:!!i.activeRoleId,currentRole:e,currentSession:t,isLocked:this.plugin.isSessionLocked(),lockTimeRemaining:this.plugin.isSessionLocked()?this.plugin.getRemainingLockTime():void 0}}}catch(i){return{success:!1,error:`Failed to get status: ${i}`}}}getRoles(){try{return{success:!0,data:this.plugin.data.roles}}catch(i){return{success:!1,error:`Failed to get roles: ${i}`}}}getRole(i){try{let e=this.plugin.data.roles.find(t=>t.id===i);return e?{success:!0,data:e}:{success:!1,error:"Role not found"}}catch(e){return{success:!1,error:`Failed to get role: ${e}`}}}createRole(i){try{return{success:!0,data:this.plugin.createRole(i.name,i.colorHex,i.description,i.icon),message:"Role created successfully"}}catch(e){return{success:!1,error:`Failed to create role: ${e}`}}}updateRole(i,e){try{return this.plugin.updateRole(i,e),{success:!0,data:this.plugin.data.roles.find(s=>s.id===i),message:"Role updated successfully"}}catch(t){return{success:!1,error:`Failed to update role: ${t}`}}}deleteRole(i){try{return this.plugin.deleteRole(i),{success:!0,message:"Role deleted successfully"}}catch(e){return{success:!1,error:`Failed to delete role: ${e}`}}}startSession(i){try{return this.plugin.startSession(i),{success:!0,message:"Session started successfully"}}catch(e){return{success:!1,error:`Failed to start session: ${e}`}}}switchSession(i){try{return this.plugin.isSessionLocked()?{success:!1,error:`Session is locked for ${this.plugin.getRemainingLockTime()} more seconds`}:(this.plugin.confirmSwitch(i),{success:!0,message:"Session switched successfully"})}catch(e){return{success:!1,error:`Failed to switch session: ${e}`}}}endSession(){try{return this.plugin.endSession(),{success:!0,message:"Session ended successfully"}}catch(i){return{success:!1,error:`Failed to end session: ${i}`}}}getSessions(i){try{let e=i!=null&&i.startDate?new Date(i.startDate):void 0,t=i!=null&&i.endDate?new Date(i.endDate):void 0,s=this.plugin.getDerivedSessions(e,t);return i!=null&&i.roleId&&(s=s.filter(a=>a.roleId===i.roleId)),{success:!0,data:s}}catch(e){return{success:!1,error:`Failed to get sessions: ${e}`}}}addNote(i){try{return{success:!0,data:this.plugin.addNote(i.sessionId,i.text),message:"Note added successfully"}}catch(e){return{success:!1,error:`Failed to add note: ${e}`}}}updateNote(i,e){try{return this.plugin.updateNote(i,e.text),{success:!0,message:"Note updated successfully"}}catch(t){return{success:!1,error:`Failed to update note: ${t}`}}}deleteNote(i){try{return this.plugin.deleteNote(i),{success:!0,message:"Note deleted successfully"}}catch(e){return{success:!1,error:`Failed to delete note: ${e}`}}}getEvents(i){try{let e=[...this.plugin.data.events];if(i!=null&&i.startDate){let t=new Date(i.startDate);e=e.filter(s=>new Date(s.at)>=t)}if(i!=null&&i.endDate){let t=new Date(i.endDate);e=e.filter(s=>new Date(s.at)<=t)}return i!=null&&i.roleId&&(e=e.filter(t=>t.roleId===i.roleId)),i!=null&&i.type&&(e=e.filter(t=>t.type===i.type)),{success:!0,data:e}}catch(e){return{success:!1,error:`Failed to get events: ${e}`}}}getAnalytics(i){try{let e=i!=null&&i.startDate?new Date(i.startDate):void 0,t=i!=null&&i.endDate?new Date(i.endDate):void 0,s=this.plugin.getDerivedSessions(e,t),a=this.plugin.data.roles,n=s.length,o=s.reduce((c,l)=>{let h=l.endAt?new Date(l.endAt).getTime():Date.now(),v=new Date(l.startAt).getTime();return c+(h-v)/1e3},0),r=new Map;a.forEach(c=>{r.set(c.id,{roleId:c.id,roleName:c.name,sessionCount:0,totalTime:0,percentage:0})}),s.forEach(c=>{let l=r.get(c.roleId);if(l){l.sessionCount++;let h=c.endAt?new Date(c.endAt).getTime():Date.now(),v=new Date(c.startAt).getTime();l.totalTime+=(h-v)/1e3}}),r.forEach(c=>{o>0&&(c.percentage=c.totalTime/o*100)});let u=new Map;return s.forEach(c=>{let l=new Date(c.startAt).toISOString().split("T")[0];u.has(l)||u.set(l,{date:l,totalTime:0,sessionCount:0});let h=u.get(l);h.sessionCount++;let v=c.endAt?new Date(c.endAt).getTime():Date.now(),w=new Date(c.startAt).getTime();h.totalTime+=(v-w)/1e3}),{success:!0,data:{totalSessions:n,totalTime:o,roleBreakdown:Array.from(r.values()),dailyBreakdown:Array.from(u.values()).sort((c,l)=>c.date.localeCompare(l.date))}}}catch(e){return{success:!1,error:`Failed to get analytics: ${e}`}}}handleSyncPush(i){try{return this.mergeSyncData(i),{success:!0,message:"Sync data pushed successfully",data:{merged:!0,timestamp:new Date().toISOString()}}}catch(e){return{success:!1,error:`Failed to handle sync push: ${e}`}}}handleSyncPull(i){try{let e=this.plugin.data.settings.deviceId||this.generateDeviceId(),t=this.plugin.data.settings.deviceName,s=[...this.plugin.data.events];if(i!=null&&i.since){let n=new Date(i.since);s=s.filter(o=>new Date(o.at)>n)}return{success:!0,data:{deviceId:e,deviceName:t,timestamp:new Date().toISOString(),roles:[...this.plugin.data.roles],events:s,state:{...this.plugin.data.state}}}}catch(e){return{success:!1,error:`Failed to handle sync pull: ${e}`}}}async handleSyncBidirectional(i){try{return this.mergeSyncData(i),{success:!0,message:"Bidirectional sync completed",data:this.handleSyncPull().data}}catch(e){return{success:!1,error:`Failed to handle bidirectional sync: ${e}`}}}mergeSyncData(i){i.roles.forEach(e=>{let t=this.plugin.data.roles.findIndex(s=>s.id===e.id);t>=0?this.plugin.data.roles[t]=e:this.plugin.data.roles.push(e)}),i.events.forEach(e=>{this.plugin.data.events.some(s=>s.id===e.id)||this.plugin.data.events.push(e)}),this.plugin.data.events.sort((e,t)=>new Date(e.at).getTime()-new Date(t.at).getTime()),i.state.activeStartAt&&(!this.plugin.data.state.activeStartAt||new Date(i.state.activeStartAt)>new Date(this.plugin.data.state.activeStartAt))&&this.plugin.data.roles.some(t=>t.id===i.state.activeRoleId)&&(this.plugin.data.state={...i.state}),this.plugin.savePluginData(),this.plugin.updateStatusBar(),this.plugin.updateWorkspaceBorder(),this.plugin.refreshSidePanel()}generateDeviceId(){let i=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);return this.plugin.data.settings.deviceId=i,this.plugin.savePluginData(),i}};var $=class{constructor(i,e){this.api=i,this.auth=e,this.routes=new Map,this.setupRoutes()}setupRoutes(){this.routes.set("GET /api/status",{handler:this.handleGetStatus.bind(this),permission:"read"}),this.routes.set("POST /api/auth/keys",{handler:this.handleCreateApiKey.bind(this),permission:"admin"}),this.routes.set("GET /api/auth/keys",{handler:this.handleGetApiKeys.bind(this),permission:"admin"}),this.routes.set("PUT /api/auth/keys/:id",{handler:this.handleUpdateApiKey.bind(this),permission:"admin"}),this.routes.set("DELETE /api/auth/keys/:id",{handler:this.handleDeleteApiKey.bind(this),permission:"admin"}),this.routes.set("GET /api/roles",{handler:this.handleGetRoles.bind(this),permission:"read"}),this.routes.set("GET /api/roles/:id",{handler:this.handleGetRole.bind(this),permission:"read"}),this.routes.set("POST /api/roles",{handler:this.handleCreateRole.bind(this),permission:"write"}),this.routes.set("PUT /api/roles/:id",{handler:this.handleUpdateRole.bind(this),permission:"write"}),this.routes.set("DELETE /api/roles/:id",{handler:this.handleDeleteRole.bind(this),permission:"write"}),this.routes.set("POST /api/sessions/start",{handler:this.handleStartSession.bind(this),permission:"write"}),this.routes.set("POST /api/sessions/switch",{handler:this.handleSwitchSession.bind(this),permission:"write"}),this.routes.set("POST /api/sessions/end",{handler:this.handleEndSession.bind(this),permission:"write"}),this.routes.set("GET /api/sessions",{handler:this.handleGetSessions.bind(this),permission:"read"}),this.routes.set("POST /api/notes",{handler:this.handleAddNote.bind(this),permission:"write"}),this.routes.set("PUT /api/notes/:id",{handler:this.handleUpdateNote.bind(this),permission:"write"}),this.routes.set("DELETE /api/notes/:id",{handler:this.handleDeleteNote.bind(this),permission:"write"}),this.routes.set("GET /api/events",{handler:this.handleGetEvents.bind(this),permission:"read"}),this.routes.set("GET /api/analytics",{handler:this.handleGetAnalytics.bind(this),permission:"read"}),this.routes.set("POST /api/sync/push",{handler:this.handleSyncPush.bind(this),permission:"write"}),this.routes.set("GET /api/sync/pull",{handler:this.handleSyncPull.bind(this),permission:"read"}),this.routes.set("POST /api/sync/bidirectional",{handler:this.handleSyncBidirectional.bind(this),permission:"write"})}async handleRequest(i){try{let e={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization, X-API-Key, X-Timestamp, X-Signature","Content-Type":"application/json"};if(i.method==="OPTIONS")return{statusCode:200,headers:e,body:null};let t=`${i.method} ${this.extractRoutePath(i.url)}`,s=this.routes.get(t);if(!s)return{statusCode:404,headers:e,body:{success:!1,error:"Endpoint not found"}};if(s.permission){let n=this.auth.authenticateRequest(i.headers,s.permission);if(!n.isAuthenticated)return{statusCode:401,headers:e,body:{success:!1,error:n.error||"Authentication required"}};i.apiKey=n.apiKey}i.params=this.extractPathParams(i.url,t),i.query=this.extractQueryParams(i.url);let a=await s.handler(i);return a.headers={...e,...a.headers},a}catch(e){return{statusCode:500,headers:{"Content-Type":"application/json"},body:{success:!1,error:`Internal server error: ${e}`}}}}extractRoutePath(i){return i.split("?")[0].replace(/\/[^\/]+/g,t=>/^\/[a-f0-9-]{36}$/i.test(t)||/^\/\d+$/.test(t)?"/:id":t)}extractPathParams(i,e){let t={},s=i.split("?")[0].split("/"),a=e.split(" ")[1].split("/");for(let n=0;n<a.length;n++)if(a[n].startsWith(":")){let o=a[n].substring(1);t[o]=s[n]}return t}extractQueryParams(i){let e={},t=i.split("?")[1];return t&&t.split("&").forEach(s=>{let[a,n]=s.split("=");e[decodeURIComponent(a)]=decodeURIComponent(n||"")}),e}createResponse(i,e=200){return{statusCode:i.success?e:400,headers:{},body:i}}async handleGetStatus(i){let e=this.api.getStatus();return this.createResponse(e)}async handleGetRoles(i){let e=this.api.getRoles();return this.createResponse(e)}async handleGetRole(i){var s;let e=(s=i.params)==null?void 0:s.id;if(!e)return this.createResponse({success:!1,error:"Role ID is required"});let t=this.api.getRole(e);return this.createResponse(t)}async handleCreateRole(i){if(!i.body)return this.createResponse({success:!1,error:"Request body is required"});let e=this.api.createRole(i.body);return this.createResponse(e,201)}async handleUpdateRole(i){var s;let e=(s=i.params)==null?void 0:s.id;if(!e)return this.createResponse({success:!1,error:"Role ID is required"});if(!i.body)return this.createResponse({success:!1,error:"Request body is required"});let t=this.api.updateRole(e,i.body);return this.createResponse(t)}async handleDeleteRole(i){var s;let e=(s=i.params)==null?void 0:s.id;if(!e)return this.createResponse({success:!1,error:"Role ID is required"});let t=this.api.deleteRole(e);return this.createResponse(t)}async handleStartSession(i){let{roleId:e}=i.body||{};if(!e)return this.createResponse({success:!1,error:"Role ID is required"});let t=this.api.startSession(e);return this.createResponse(t)}async handleSwitchSession(i){let{roleId:e}=i.body||{};if(!e)return this.createResponse({success:!1,error:"Role ID is required"});let t=this.api.switchSession(e);return this.createResponse(t)}async handleEndSession(i){let e=this.api.endSession();return this.createResponse(e)}async handleGetSessions(i){var s,a,n;let e={startDate:(s=i.query)==null?void 0:s.startDate,endDate:(a=i.query)==null?void 0:a.endDate,roleId:(n=i.query)==null?void 0:n.roleId},t=this.api.getSessions(e);return this.createResponse(t)}async handleAddNote(i){if(!i.body)return this.createResponse({success:!1,error:"Request body is required"});let e=this.api.addNote(i.body);return this.createResponse(e,201)}async handleUpdateNote(i){var s;let e=(s=i.params)==null?void 0:s.id;if(!e)return this.createResponse({success:!1,error:"Note ID is required"});if(!i.body)return this.createResponse({success:!1,error:"Request body is required"});let t=this.api.updateNote(e,i.body);return this.createResponse(t)}async handleDeleteNote(i){var s;let e=(s=i.params)==null?void 0:s.id;if(!e)return this.createResponse({success:!1,error:"Note ID is required"});let t=this.api.deleteNote(e);return this.createResponse(t)}async handleGetEvents(i){var s,a,n,o;let e={startDate:(s=i.query)==null?void 0:s.startDate,endDate:(a=i.query)==null?void 0:a.endDate,roleId:(n=i.query)==null?void 0:n.roleId,type:(o=i.query)==null?void 0:o.type},t=this.api.getEvents(e);return this.createResponse(t)}async handleGetAnalytics(i){var s,a;let e={startDate:(s=i.query)==null?void 0:s.startDate,endDate:(a=i.query)==null?void 0:a.endDate},t=this.api.getAnalytics(e);return this.createResponse(t)}async handleCreateApiKey(i){if(!i.body)return this.createResponse({success:!1,error:"Request body is required"});let{name:e,permissions:t}=i.body;if(!e||!t)return this.createResponse({success:!1,error:"Name and permissions are required"});try{let s=this.auth.generateApiKey(e,t);return this.createResponse({success:!0,data:s},201)}catch(s){return this.createResponse({success:!1,error:`Failed to create API key: ${s}`})}}async handleGetApiKeys(i){try{let e=this.auth.getApiKeys();return this.createResponse({success:!0,data:e})}catch(e){return this.createResponse({success:!1,error:`Failed to get API keys: ${e}`})}}async handleUpdateApiKey(i){var t;let e=(t=i.params)==null?void 0:t.id;if(!e)return this.createResponse({success:!1,error:"API key ID is required"});if(!i.body)return this.createResponse({success:!1,error:"Request body is required"});try{return this.auth.updateApiKey(e,i.body),this.createResponse({success:!0,message:"API key updated successfully"})}catch(s){return this.createResponse({success:!1,error:`Failed to update API key: ${s}`})}}async handleDeleteApiKey(i){var t;let e=(t=i.params)==null?void 0:t.id;if(!e)return this.createResponse({success:!1,error:"API key ID is required"});try{return this.auth.deleteApiKey(e),this.createResponse({success:!0,message:"API key deleted successfully"})}catch(s){return this.createResponse({success:!1,error:`Failed to delete API key: ${s}`})}}async handleSyncPush(i){if(!i.body)return this.createResponse({success:!1,error:"Request body is required"});try{let e=await this.api.handleSyncPush(i.body);return this.createResponse(e)}catch(e){return this.createResponse({success:!1,error:`Sync push failed: ${e}`})}}async handleSyncPull(i){var e,t;try{let s={since:(e=i.query)==null?void 0:e.since,deviceId:(t=i.query)==null?void 0:t.deviceId},a=this.api.handleSyncPull(s);return this.createResponse(a)}catch(s){return this.createResponse({success:!1,error:`Sync pull failed: ${s}`})}}async handleSyncBidirectional(i){if(!i.body)return this.createResponse({success:!1,error:"Request body is required"});try{let e=await this.api.handleSyncBidirectional(i.body);return this.createResponse(e)}catch(e){return this.createResponse({success:!1,error:`Bidirectional sync failed: ${e}`})}}};var O=class{constructor(i){this.plugin=i}generateApiKey(i,e){let t={id:p.generateId(),name:i,key:this.generateRandomKey(32),secret:this.generateRandomKey(64),createdAt:new Date().toISOString(),permissions:e,isActive:!0};return this.plugin.data.apiKeys.push(t),this.plugin.savePluginData(),t}generateRandomKey(i){let e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",t="";for(let s=0;s<i;s++)t+=e.charAt(Math.floor(Math.random()*e.length));return t}updateApiKey(i,e){let t=this.plugin.data.apiKeys.find(s=>s.id===i);if(!t)throw new Error("API key not found");Object.assign(t,e),this.plugin.savePluginData()}deleteApiKey(i){this.plugin.data.apiKeys=this.plugin.data.apiKeys.filter(e=>e.id!==i),this.plugin.savePluginData()}getApiKeys(){return this.plugin.data.apiKeys.map(i=>({...i,secret:"***HIDDEN***"}))}getApiKey(i){return this.plugin.data.apiKeys.find(e=>e.id===i)||null}validateApiKey(i,e){if(!this.plugin.data.settings.enableAuthentication)return null;let t=this.plugin.data.apiKeys.find(s=>s.key===i&&s.isActive);return!t||e&&!t.permissions.includes(e)&&!t.permissions.includes("admin")?null:(t.lastUsed=new Date().toISOString(),this.plugin.savePluginData(),t)}authenticateRequest(i,e){if(!this.plugin.data.settings.enableAuthentication)return{isAuthenticated:!0};let t=i.authorization||i.Authorization,s=i["x-api-key"]||i["X-API-Key"],a=null;if(t&&t.startsWith("Bearer ")?a=t.substring(7):s&&(a=s),!a)return{isAuthenticated:!1,error:"API key required. Provide via Authorization: Bearer <key> or X-API-Key header"};let n=this.validateApiKey(a,e);return n?{isAuthenticated:!0,apiKey:n}:{isAuthenticated:!1,error:"Invalid API key or insufficient permissions"}}generateSignature(i,e){let t=0,s=i+e;for(let a=0;a<s.length;a++){let n=s.charCodeAt(a);t=(t<<5)-t+n,t=t&t}return Math.abs(t).toString(16)}verifySignature(i,e,t){return this.generateSignature(i,t)===e}createAuthenticatedRequest(i,e){let t=Date.now().toString(),s=JSON.stringify(e),a=`${t}${s}`,n=this.generateSignature(a,i.secret);return{headers:{"Content-Type":"application/json","X-API-Key":i.key,"X-Timestamp":t,"X-Signature":n},body:s}}verifyAuthenticatedRequest(i,e){let t=i["x-api-key"]||i["X-API-Key"],s=i["x-timestamp"]||i["X-Timestamp"],a=i["x-signature"]||i["X-Signature"];if(!t||!s||!a)return{isValid:!1,error:"Missing authentication headers (X-API-Key, X-Timestamp, X-Signature)"};let n=this.plugin.data.apiKeys.find(l=>l.key===t&&l.isActive);if(!n)return{isValid:!1,error:"Invalid API key"};let o=parseInt(s),r=Date.now();if(Math.abs(r-o)>3e5)return{isValid:!1,error:"Request timestamp too old"};let c=`${s}${e}`;return this.verifySignature(c,a,n.secret)?(n.lastUsed=new Date().toISOString(),this.plugin.savePluginData(),{isValid:!0,apiKey:n}):{isValid:!1,error:"Invalid signature"}}};var P=require("obsidian"),K=class{constructor(i,e){this.syncIntervalId=null;this.plugin=i,this.auth=e}addSyncEndpoint(i,e,t,s){let a={id:this.generateId(),name:i,url:e.replace(/\/$/,""),apiKey:t,isActive:!0,syncDirection:s};return this.plugin.data.syncEndpoints.push(a),this.plugin.savePluginData(),a}updateSyncEndpoint(i,e){let t=this.plugin.data.syncEndpoints.find(s=>s.id===i);if(!t)throw new Error("Sync endpoint not found");Object.assign(t,e),this.plugin.savePluginData()}deleteSyncEndpoint(i){this.plugin.data.syncEndpoints=this.plugin.data.syncEndpoints.filter(e=>e.id!==i),this.plugin.savePluginData()}getSyncEndpoints(){return this.plugin.data.syncEndpoints}startAutoSync(){if(this.syncIntervalId||!this.plugin.data.settings.enableSync)return;let i=this.plugin.data.settings.syncInterval*60*1e3;this.syncIntervalId=window.setInterval(()=>{this.syncAllEndpoints()},i),console.log(`RoleSwitch: Auto-sync started with ${this.plugin.data.settings.syncInterval}min interval`)}stopAutoSync(){this.syncIntervalId&&(clearInterval(this.syncIntervalId),this.syncIntervalId=null,console.log("RoleSwitch: Auto-sync stopped"))}async syncAllEndpoints(){let i=this.plugin.data.syncEndpoints.filter(e=>e.isActive);for(let e of i)try{await this.syncWithEndpoint(e)}catch(t){console.error(`RoleSwitch: Failed to sync with ${e.name}:`,t)}}async syncWithEndpoint(i){let e=this.plugin.data.apiKeys.find(t=>t.id===i.apiKey);if(!e)throw new Error(`API key not found for endpoint: ${i.name}`);switch(i.syncDirection){case"push":await this.pushToEndpoint(i,e);break;case"pull":await this.pullFromEndpoint(i,e);break;case"bidirectional":await this.bidirectionalSyncWithEndpoint(i,e);break}i.lastSync=new Date().toISOString(),this.plugin.savePluginData()}async pushToEndpoint(i,e){let s={deviceId:this.plugin.data.settings.deviceId||this.generateDeviceId(),deviceName:this.plugin.data.settings.deviceName,timestamp:new Date().toISOString(),roles:[...this.plugin.data.roles],events:[...this.plugin.data.events],state:{...this.plugin.data.state}},a=this.auth.createAuthenticatedRequest(e,s);await(0,P.requestUrl)({url:`${i.url}/api/sync/push`,method:"POST",headers:a.headers,body:a.body})}async pullFromEndpoint(i,e){let t=i.lastSync||new Date(0).toISOString(),s=this.plugin.data.settings.deviceId,a=this.auth.createAuthenticatedRequest(e,{}),n=await(0,P.requestUrl)({url:`${i.url}/api/sync/pull?since=${encodeURIComponent(t)}&deviceId=${encodeURIComponent(s)}`,method:"GET",headers:{"X-API-Key":e.key,"Content-Type":"application/json"}});n.json.success&&n.json.data&&this.mergeSyncData(n.json.data)}async bidirectionalSyncWithEndpoint(i,e){let s={deviceId:this.plugin.data.settings.deviceId||this.generateDeviceId(),deviceName:this.plugin.data.settings.deviceName,timestamp:new Date().toISOString(),roles:[...this.plugin.data.roles],events:[...this.plugin.data.events],state:{...this.plugin.data.state}},a=this.auth.createAuthenticatedRequest(e,s),n=await(0,P.requestUrl)({url:`${i.url}/api/sync/bidirectional`,method:"POST",headers:a.headers,body:a.body});n.json.success&&n.json.data&&this.mergeSyncData(n.json.data)}async testEndpointConnection(i){try{let e=this.plugin.data.apiKeys.find(s=>s.id===i.apiKey);if(!e)return{success:!1,message:"API key not found"};let t=await(0,P.requestUrl)({url:`${i.url}/api/status`,method:"GET",headers:{"X-API-Key":e.key,"Content-Type":"application/json"}});return t.json.success?{success:!0,message:"Connection successful"}:{success:!1,message:t.json.error||"Unknown error"}}catch(e){return{success:!1,message:`Connection failed: ${e}`}}}async manualSyncEndpoint(i){try{let e=this.plugin.data.syncEndpoints.find(t=>t.id===i);return e?(await this.syncWithEndpoint(e),{success:!0,message:`Successfully synced with ${e.name}`}):{success:!1,message:"Endpoint not found"}}catch(e){return{success:!1,message:`Sync failed: ${e}`}}}mergeSyncData(i){i.roles.forEach(t=>{let s=this.plugin.data.roles.findIndex(a=>a.id===t.id);s>=0?this.plugin.data.roles[s]=t:this.plugin.data.roles.push(t)});let e=[];i.events.forEach(t=>{this.plugin.data.events.some(a=>a.id===t.id)||e.push(t)}),this.plugin.data.events.push(...e),this.plugin.data.events.sort((t,s)=>new Date(t.at).getTime()-new Date(s.at).getTime()),i.state.activeStartAt&&(!this.plugin.data.state.activeStartAt||new Date(i.state.activeStartAt)>new Date(this.plugin.data.state.activeStartAt))&&this.plugin.data.roles.some(s=>s.id===i.state.activeRoleId)&&(this.plugin.data.state={...i.state}),this.plugin.savePluginData(),this.plugin.updateStatusBar(),this.plugin.updateWorkspaceBorder(),this.plugin.refreshSidePanel(),console.log(`RoleSwitch: Merged sync data from ${i.deviceName} (${i.deviceId})`)}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2,9)}generateDeviceId(){let i=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);return this.plugin.data.settings.deviceId=i,this.plugin.savePluginData(),i}getSyncStatus(){let i=this.plugin.data.syncEndpoints.filter(t=>t.isActive),e={};return i.forEach(t=>{t.lastSync&&(e[t.name]=t.lastSync)}),{isAutoSyncEnabled:this.plugin.data.settings.enableSync,activeEndpoints:i.length,lastSyncTimes:e}}};var q=class extends f.Plugin{constructor(){super(...arguments);this.statusBarItem=null;this.borderEl=null;this.reminderInterval=null}async onload(){if(await this.loadPluginData(),this.registerView(I,e=>new T(e,this)),this.addRibbonIcon("clock","RoleSwitch Panel",()=>{this.activateView()}),this.registerCommands(),this.addSettingTab(new L(this.app,this)),this.updateStatusBar(),this.updateWorkspaceBorder(),this.auth=new O(this),this.api=new H(this,this.data.settings.apiPort||3030),this.httpServer=new $(this.api,this.auth),this.sync=new K(this,this.auth),this.data.settings.deviceId||(this.data.settings.deviceId=this.generateDeviceId(),this.savePluginData()),this.data.settings.enableApi)try{await this.api.startServer()}catch(e){console.error("Failed to start RoleSwitch API server:",e)}this.data.settings.enableSync&&this.sync.startAutoSync(),this.registerInterval(window.setInterval(()=>{this.savePluginData()},6e4)),this.registerDomEvent(document,"visibilitychange",()=>{document.hidden&&this.savePluginData()}),this.registerDomEvent(window,"beforeunload",()=>{this.savePluginData()})}async onunload(){if(await this.savePluginData(),this.removeStatusBar(),this.removeWorkspaceBorder(),this.stopReminderInterval(),this.sync&&this.sync.stopAutoSync(),this.api)try{await this.api.stopServer()}catch(e){console.error("Failed to stop RoleSwitch API server:",e)}}async loadPluginData(){let e={roles:[],events:[],state:{activeRoleId:null,activeSessionId:null,activeStartAt:null,inTransition:!1,lockUntil:null},settings:{...k},apiKeys:[],syncEndpoints:[]};this.data=Object.assign(e,await this.loadData())}async savePluginData(){try{await this.saveData(this.data)}catch(e){console.error("RoleSwitch: Failed to save plugin data:",e),new f.Notice("RoleSwitch: Failed to save data. Please check console for details.")}}getRoleById(e){let t=this.data.roles.find(s=>s.id===e);return t||{id:e,name:"(Deleted Role)",colorHex:"#888888",description:"This role has been deleted"}}createRole(e,t,s,a){let n={id:p.generateId(),name:e,colorHex:t,description:s,icon:a};return this.data.roles.push(n),this.savePluginData(),this.refreshSidePanel(),n}updateRole(e,t){let s=this.data.roles.find(a=>a.id===e);if(!s)throw new Error("Role not found");Object.assign(s,t),this.savePluginData(),this.refreshSidePanel(),this.updateStatusBar(),this.updateWorkspaceBorder()}deleteRole(e){this.data.state.activeRoleId===e&&this.endSession(),this.data.roles=this.data.roles.filter(t=>t.id!==e),this.savePluginData(),this.refreshSidePanel()}startSession(e){let t=this.data.roles.find(n=>n.id===e);if(!t){new f.Notice("Role not found");return}this.data.state.activeRoleId&&this.endSession();let s=p.generateId(),a=new Date().toISOString();this.data.state={activeRoleId:e,activeSessionId:s,activeStartAt:a,inTransition:!1,lockUntil:new Date(Date.now()+this.data.settings.minSessionSeconds*1e3).toISOString()},this.data.events.push({id:p.generateId(),type:"start",roleId:e,at:a,meta:{sessionId:s}}),this.savePluginData(),this.updateStatusBar(),this.updateWorkspaceBorder(),this.refreshSidePanel(),this.updateReminderInterval(),new f.Notice(`Started ${t.name} session`)}switchSession(e){let t=this.data.roles.find(s=>s.id===e);if(!t){new f.Notice("Role not found");return}if(this.data.state.activeRoleId===e){new f.Notice("Already in this role");return}if(this.isSessionLocked()){let s=this.getRemainingLockTime();new f.Notice(`Session locked for ${s} more seconds`);return}new A(this.app,this,t).open()}confirmSwitch(e){let t=this.data.roles.find(n=>n.id===e);if(!t)return;let s=new Date().toISOString(),a=p.generateId();this.data.events.push({id:p.generateId(),type:"switch",roleId:e,at:s,meta:{sessionId:a,fromRoleId:this.data.state.activeRoleId||void 0}}),this.data.state={activeRoleId:e,activeSessionId:a,activeStartAt:s,inTransition:!1,lockUntil:new Date(Date.now()+this.data.settings.minSessionSeconds*1e3).toISOString()},this.savePluginData(),this.updateStatusBar(),this.updateWorkspaceBorder(),this.refreshSidePanel(),this.updateReminderInterval(),new f.Notice(`Switched to ${t.name}`)}endSession(){if(!this.data.state.activeRoleId){new f.Notice("No active session");return}let e=this.data.roles.find(s=>s.id===this.data.state.activeRoleId),t=new Date().toISOString();this.data.events.push({id:p.generateId(),type:"end",roleId:this.data.state.activeRoleId,at:t,meta:{sessionId:this.data.state.activeSessionId||void 0,duration:this.data.state.activeStartAt?(Date.now()-new Date(this.data.state.activeStartAt).getTime())/1e3:void 0}}),this.data.state={activeRoleId:null,activeSessionId:null,activeStartAt:null,inTransition:!1,lockUntil:null},this.savePluginData(),this.updateStatusBar(),this.updateWorkspaceBorder(),this.refreshSidePanel(),this.stopReminderInterval(),new f.Notice(`Ended ${(e==null?void 0:e.name)||"session"}`)}isSessionLocked(){return this.data.state.lockUntil?new Date<new Date(this.data.state.lockUntil):!1}getRemainingLockTime(){if(!this.data.state.lockUntil)return 0;let e=Math.max(0,new Date(this.data.state.lockUntil).getTime()-Date.now());return Math.ceil(e/1e3)}getDerivedSessions(e,t){return p.deriveSessionsFromEvents(this.data.events,e,t)}addNote(e,t){let s={id:p.generateId(),text:t,createdAt:new Date().toISOString()},n=this.getDerivedSessions().find(o=>o.id===e);return n&&n.notes.push(s),this.savePluginData(),s}updateNote(e,t){let s=this.getDerivedSessions();for(let a of s){let n=a.notes.find(o=>o.id===e);if(n){n.text=t,this.savePluginData();return}}throw new Error("Note not found")}deleteNote(e){let t=this.getDerivedSessions();for(let s of t){let a=s.notes.findIndex(n=>n.id===e);if(a!==-1){s.notes.splice(a,1),this.savePluginData();return}}throw new Error("Note not found")}async activateView(){let{workspace:e}=this.app,t=e.getLeavesOfType(I)[0];if(!t){let s=e.getLeftLeaf(!1);if(s)t=s,await t.setViewState({type:I,active:!0});else{console.error("RoleSwitchPlugin: No left leaf available!");return}}t?e.revealLeaf(t):console.error("RoleSwitchPlugin: No leaf available to reveal!")}refreshSidePanel(){this.app.workspace.getLeavesOfType(I).forEach(t=>{t.view instanceof T&&t.view.refresh()})}updateStatusBar(){if(!this.data.settings.showStatusBar){this.removeStatusBar();return}if(this.statusBarItem||(this.statusBarItem=this.addStatusBarItem(),this.statusBarItem.addClass("status-bar-item")),this.data.state.activeRoleId){let e=this.data.roles.find(t=>t.id===this.data.state.activeRoleId);e&&(this.statusBarItem.setText(`\u{1F3AF} ${e.name}`),this.statusBarItem.style.color=e.colorHex)}else this.statusBarItem.setText("\u23F8\uFE0F No active role"),this.statusBarItem.style.color="var(--text-muted)"}removeStatusBar(){this.statusBarItem&&(this.statusBarItem.remove(),this.statusBarItem=null)}updateWorkspaceBorder(){if(this.removeWorkspaceBorder(),!this.data.settings.showWorkspaceBorder||!this.data.state.activeRoleId)return;let e=this.data.roles.find(s=>s.id===this.data.state.activeRoleId);if(!e)return;this.borderEl=document.createElement("div"),this.borderEl.addClass("workspace-border"),this.borderEl.style.borderColor=e.colorHex,this.borderEl.style.opacity=this.data.settings.borderOpacity.toString(),this.borderEl.style.pointerEvents="none",this.borderEl.setAttribute("data-role-switch-border","true"),(document.querySelector(".app-container")||document.body).appendChild(this.borderEl)}removeWorkspaceBorder(){this.borderEl&&(this.borderEl.remove(),this.borderEl=null)}registerCommands(){this.addCommand({id:"open-panel",name:"Open panel",callback:()=>{this.activateView()}}),this.addCommand({id:"open-dashboard",name:"Open dashboard",callback:()=>{new E(this.app,this).open()}}),this.addCommand({id:"start-session",name:"Start session",callback:()=>{new C(this.app,this,"start").open()}}),this.addCommand({id:"switch-session",name:"Switch session",callback:()=>{if(!this.data.state.activeRoleId){new f.Notice("No active session to switch from");return}new C(this.app,this,"switch").open()}}),this.addCommand({id:"end-session",name:"End current session",callback:()=>{this.endSession()}}),this.addCommand({id:"add-note",name:"Add note to current session",callback:()=>{if(!this.data.state.activeSessionId){new f.Notice("No active session to add note to");return}new M(this.app,this,this.data.state.activeSessionId,null).open()}}),this.addCommand({id:"start-api-server",name:"Start API server",callback:async()=>{if(!this.api){console.error("API not initialized");return}try{await this.api.startServer(),new f.Notice("API server started successfully")}catch(e){new f.Notice(`Failed to start API server: ${e}`)}}}),this.addCommand({id:"stop-api-server",name:"Stop API server",callback:async()=>{if(!this.api){console.error("API not initialized");return}try{await this.api.stopServer(),new f.Notice("API server stopped successfully")}catch(e){new f.Notice(`Failed to stop API server: ${e}`)}}})}getApiStatus(){return this.api?this.api.getStatus():null}async startApiServer(){this.api&&await this.api.startServer()}async stopApiServer(){this.api&&await this.api.stopServer()}handleApiRequest(e,t,s,a){return this.httpServer?this.httpServer.handleRequest({method:e,url:t,headers:s,body:a}):{statusCode:503,headers:{"Content-Type":"application/json"},body:{success:!1,error:"API server not initialized"}}}generateDeviceId(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}updateReminderInterval(){this.stopReminderInterval(),this.data.settings.showPeriodicReminder&&this.data.state.activeRoleId&&this.startReminderInterval()}startReminderInterval(){if(!this.data.settings.showPeriodicReminder||!this.data.state.activeRoleId)return;let e=this.data.settings.reminderIntervalMinutes*60*1e3;this.showRoleReminder(),this.reminderInterval=this.registerInterval(window.setInterval(()=>{this.showRoleReminder()},e))}stopReminderInterval(){this.reminderInterval!==null&&(window.clearInterval(this.reminderInterval),this.reminderInterval=null)}showRoleReminder(){if(!this.data.state.activeRoleId)return;let e=this.data.roles.find(a=>a.id===this.data.state.activeRoleId);if(!e)return;let t=document.createDocumentFragment(),s=document.createElement("span");s.style.color=e.colorHex,s.style.fontWeight="bold",s.textContent=`You are now playing the role of '${e.name}'. Don't forget, you are playing the role of '${e.name}'.`,t.appendChild(s),new f.Notice(t,8e3)}};
